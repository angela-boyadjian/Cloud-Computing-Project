service: user-home
frameworkVersion: '2'
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-2
  environment:
    RECEIPTS_TABLE: receipts
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
        - "s3:PutObject"
        - "s3:GetObject"
      Resource: "arn:aws:s3:::*/*"
    - Effect: 'Allow'
      Action:
        - "s3:*"
        - 's3:ListBucket'
      Resource: "arn:aws:s3:::*/*"
    - Effect: 'Allow'
      Action:
        - "cognito-idp:AdminUpdateUserAttributes"
      Resource: "arn:aws:cognito-idp:eu-west-2:843314631316:userpool/eu-west-2_kT5EeqP0M"
  apiGateway:
    binaryMediaTypes:
          - '*/*'
  tracing:
    apiGateway: true
    lambda: true

functions:
  user:
    handler: user.home
    events:
      - http:
          path: /user
          method: get
          authorizer:
            name: Authorization
            arn: arn:aws:cognito-idp:eu-west-2:843314631316:userpool/eu-west-2_kT5EeqP0M
  user_pp_get:
    handler: user_picture.get
    description: "Lambda function to generate signedUrl and access to profile picture of user."
    events:
      - http:
          path: /user/pp-upload
          method: get
          authorizer:
            #name: Authorization
            #arn: arn:aws:cognito-idp:eu-west-2:843314631316:userpool/eu-west-2_kT5EeqP0M
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
      - s3:
          bucket: users-profile-picture
          event: "s3:ObjectCreated:*"
  user_pp_post:
    handler: user_picture.post
    events:
      - http:
          path: /user/pp-upload
          method: post
          authorizer:
            #name: Authorization
            #arn: arn:aws:cognito-idp:eu-west-2:843314631316:userpool/eu-west-2_kT5EeqP0M
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  user_pp_delete:
    handler: user_picture.delete
    events:
    - http:
        path: /user/pp-upload
        method: delete
        authorizer:
          #name: Authorization
          #arn: arn:aws:cognito-idp:eu-west-2:843314631316:userpool/eu-west-2_kT5EeqP0M
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: cloud-computing
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: cloud-computing-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
      - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]