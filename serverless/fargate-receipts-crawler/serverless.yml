frameworkVersion: '2'
service: fargate-receipts-report
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-2
  apiGateway:
    restApiId: k8sjcbmqde
    restApiRootResourceId: 3et3hse7ki
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
        - "ses:*"
        - "ecs:*"
      Resource: "*"

plugins:
  - serverless-pseudo-parameters
  - serverless-import-apigateway
  - serverless-vpc-plugin

functions:
  triggerSendReport:
    handler: handler.crawldb
    events:
      - http:
          path: /fargate-receipts
          method: get
          authorizer:
            name: Authorizationfargate
            arn: arn:aws:cognito-idp:eu-west-2:843314631316:userpool/eu-west-2_kT5EeqP0M
      - s3:
          bucket: fargate-receipts-pdf
          event: s3:ObjectCreated:*
          rules:
            - suffix: .pdf

custom:
  importApiGateway:
    name: ${self:provider.stage}-user-home

resources:
  Resources:
    VPC1:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
    PublicSubnetOne:
      Type: AWS::EC2::Subnet  
      Properties:
        AvailabilityZone:
          Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
        VpcId: !Ref VPC1
        CidrBlock: 10.0.1.0/24
    #PrivateRouteTable:
    #  Type: AWS::EC2::RouteTable
    #  Properties:
    #    VpcId: !Ref VPC
    #    Tags:
    #    - Key: Name
    #      Value: Private
    #PrivateRoute1:
    #Type: AWS::EC2::Route
    #Properties:
    #  RouteTableId: !Ref PrivateRouteTable
    #  DestinationCidrBlock: 0.0.0.0/0
    #  NatGatewayId: !Ref NATGateway
    EcsCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: cluster-receipts
    ECSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to the ECS containers
        VpcId: !Ref VPC1
    ECSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ecs.amazonaws.com]
              Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: ecs-service
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'ec2:AttachNetworkInterface'
                    - 'ec2:CreateNetworkInterface'
                    - 'ec2:CreateNetworkInterfacePermission'
                    - 'ec2:DeleteNetworkInterface'
                    - 'ec2:DeleteNetworkInterfacePermission'
                    - 'ec2:Describe*'
                    - 'ec2:DetachNetworkInterface'
                  Resource: '*'
    EcsService:
      Type: AWS::ECS::Service
      Properties:
        Cluster: cluster-receipts
        LaunchType: FARGATE
        DesiredCount: 0
        SchedulingStrategy: REPLICA
        NetworkConfiguration: 
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PublicSubnetOne
        ServiceName: ReceiptsReportService
        TaskDefinition: !Ref EcsTask
    EcsTask:
      Type: AWS::ECS::TaskDefinition
      Properties: 
        ExecutionRoleArn: ecsTaskExecutionRole
        Family: ReceiptsReportingFamily
        RequiresCompatibilities:
          - FARGATE
        Cpu: 512
        Memory: 1024
        NetworkMode: awsvpc
        ContainerDefinitions:
          - Name: reicepts-crawler
            Essential: true
            Cpu: 256
            Memory: 1024
            MemoryReservation: 512
            Command:
              - npm
              - run
              - start
            Image: 843314631316.dkr.ecr.eu-west-2.amazonaws.com/fargate-task:latest
            DisableNetworking: false
            PortMappings:
              - ContainerPort: 8001
#            LogConfiguration:
#              LogDriver: awslogs
#    CloudWatchLogsGroup:
#      Type: AWS::Logs::LogGroup
#      Properties: 
#          LogGroupName: Fargate/ECS
#          RetentionInDays: 365  